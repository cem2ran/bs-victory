// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Victory = require("victory");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var Theme = /* module */[];

function make(height, width, responsive, style, children) {
  var tmp = { };
  if (height !== undefined) {
    tmp.height = Js_primitive.valFromOption(height);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (responsive !== undefined) {
    tmp.responsive = Js_primitive.valFromOption(responsive);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryContainer, tmp, children);
}

var Container = /* module */[/* make */make];

function make$1(domainPadding, domain, polar, innerRadius, theme, startAngle, endAngle, standalone, height, width, padding, disableContainerEvents, children) {
  var tmp = { };
  if (polar !== undefined) {
    tmp.polar = Js_primitive.valFromOption(polar);
  }
  if (domainPadding !== undefined) {
    tmp.domainPadding = Js_primitive.valFromOption(domainPadding);
  }
  if (domain !== undefined) {
    tmp.domain = Js_primitive.valFromOption(domain);
  }
  if (innerRadius !== undefined) {
    tmp.innerRadius = Js_primitive.valFromOption(innerRadius);
  }
  if (theme !== undefined) {
    tmp.theme = Js_primitive.valFromOption(theme);
  }
  if (startAngle !== undefined) {
    tmp.startAngle = Js_primitive.valFromOption(startAngle);
  }
  if (endAngle !== undefined) {
    tmp.endAngle = Js_primitive.valFromOption(endAngle);
  }
  if (standalone !== undefined) {
    tmp.standalone = Js_primitive.valFromOption(standalone);
  }
  if (height !== undefined) {
    tmp.height = Js_primitive.valFromOption(height);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (padding !== undefined) {
    tmp.padding = Js_primitive.valFromOption(padding);
  }
  if (disableContainerEvents !== undefined) {
    tmp.disableContainerEvents = Js_primitive.valFromOption(disableContainerEvents);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryChart, tmp, children);
}

var Chart = /* module */[/* make */make$1];

function make$2(offset, horizontal, colorScale, range, style, singleQuadrantDomainPadding, standalone, children) {
  var tmp = { };
  if (colorScale !== undefined) {
    tmp.colorScale = Js_primitive.valFromOption(colorScale);
  }
  if (offset !== undefined) {
    tmp.offset = Js_primitive.valFromOption(offset);
  }
  if (horizontal !== undefined) {
    tmp.horizontal = Js_primitive.valFromOption(horizontal);
  }
  if (range !== undefined) {
    tmp.range = Js_primitive.valFromOption(range);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  if (singleQuadrantDomainPadding !== undefined) {
    tmp.singleQuadrantDomainPadding = Js_primitive.valFromOption(singleQuadrantDomainPadding);
  }
  if (standalone !== undefined) {
    tmp.standalone = Js_primitive.valFromOption(standalone);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryGroup, tmp, children);
}

var Group = /* module */[/* make */make$2];

function make$3(data, colorScale, labels, labelRadius, style, height, width, standalone, padding, _) {
  var tmp = {
    data: data
  };
  if (padding !== undefined) {
    tmp.padding = Js_primitive.valFromOption(padding);
  }
  if (colorScale !== undefined) {
    tmp.colorScale = Js_primitive.valFromOption(colorScale);
  }
  if (labels !== undefined) {
    tmp.labels = Js_primitive.valFromOption(labels);
  }
  if (labelRadius !== undefined) {
    tmp.labelRadius = Js_primitive.valFromOption(labelRadius);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  if (height !== undefined) {
    tmp.height = Js_primitive.valFromOption(height);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (standalone !== undefined) {
    tmp.standalone = Js_primitive.valFromOption(standalone);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryPie, tmp, /* array */[]);
}

var Pie = /* module */[/* make */make$3];

function make$4(data, padding, style, _) {
  var tmp = {
    data: data
  };
  if (padding !== undefined) {
    tmp.padding = Js_primitive.valFromOption(padding);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryBar, tmp, /* array */[]);
}

var Bar = /* module */[/* make */make$4];

function make$5(dependentAxis, tickValues, tickFormat, style, label, standalone, _) {
  var tmp = { };
  if (dependentAxis !== undefined) {
    tmp.dependentAxis = Js_primitive.valFromOption(dependentAxis);
  }
  if (tickValues !== undefined) {
    tmp.tickValues = Js_primitive.valFromOption(tickValues);
  }
  if (tickFormat !== undefined) {
    tmp.tickFormat = Js_primitive.valFromOption(tickFormat);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  if (label !== undefined) {
    tmp.label = Js_primitive.valFromOption(label);
  }
  if (standalone !== undefined) {
    tmp.standalone = Js_primitive.valFromOption(standalone);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryAxis, tmp, /* array */[]);
}

var Axis = /* module */[/* make */make$5];

function make$6(data, title, width, orientation, standalone, itemsPerRow, centerTitle, colorScale, borderPadding, gutter, symbolSpacer, style, _) {
  var tmp = {
    data: data
  };
  if (title !== undefined) {
    tmp.title = Js_primitive.valFromOption(title);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (orientation !== undefined) {
    tmp.orientation = Js_primitive.valFromOption(orientation);
  }
  if (standalone !== undefined) {
    tmp.standalone = Js_primitive.valFromOption(standalone);
  }
  if (itemsPerRow !== undefined) {
    tmp.itemsPerRow = Js_primitive.valFromOption(itemsPerRow);
  }
  if (centerTitle !== undefined) {
    tmp.centerTitle = Js_primitive.valFromOption(centerTitle);
  }
  if (colorScale !== undefined) {
    tmp.colorScale = Js_primitive.valFromOption(colorScale);
  }
  if (borderPadding !== undefined) {
    tmp.borderPadding = Js_primitive.valFromOption(borderPadding);
  }
  if (gutter !== undefined) {
    tmp.gutter = Js_primitive.valFromOption(gutter);
  }
  if (symbolSpacer !== undefined) {
    tmp.symbolSpacer = Js_primitive.valFromOption(symbolSpacer);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  return ReasonReact.wrapJsForReason(Victory.VictoryLegend, tmp, /* array */[]);
}

var Legend = /* module */[/* make */make$6];

exports.Theme = Theme;
exports.Container = Container;
exports.Chart = Chart;
exports.Group = Group;
exports.Pie = Pie;
exports.Bar = Bar;
exports.Axis = Axis;
exports.Legend = Legend;
/* victory Not a pure module */
